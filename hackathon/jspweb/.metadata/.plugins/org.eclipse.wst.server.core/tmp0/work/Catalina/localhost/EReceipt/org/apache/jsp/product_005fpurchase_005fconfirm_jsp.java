/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-06-30 13:23:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.sql.PreparedStatement;
import java.sql.*;
import java.util.*;
import java.text.*;

public final class product_005fpurchase_005fconfirm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");


String[] product_id = request.getParameterValues("product_id");

String[] amount = request.getParameterValues("amount");


request.setCharacterEncoding("utf-8");

try {
	
	String sql = null;
	PreparedStatement pstmt = null;
	ResultSet[] rs = new ResultSet[product_id.length];
	
	Class.forName("com.mysql.jdbc.Driver");  
	String DB_URL ="jdbc:mysql://localhost:3306/ereceiptdb?useSSL=false";

	Connection con =  DriverManager.getConnection(DB_URL, "admin", "1234");
	
	for(int i=0;i<product_id.length;i++) {
		
		sql = "SELECT *FROM product WHERE product_id=?";	
		pstmt = con.prepareStatement(sql);
		pstmt.setString(1, product_id[i]);
		rs[i] = pstmt.executeQuery();
		pstmt.clearParameters();
	}

	

      out.write(" \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n");
      out.write("<title>EReceipt</title>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("  html, body {\r\n");
      out.write("  font-family: Arial, sans-serif;\r\n");
      out.write("  background: #fff;\r\n");
      out.write("  margin: 0;\r\n");
      out.write("  padding: 0;\r\n");
      out.write("  border: 0;\r\n");
      out.write("  position: absolute;\r\n");
      out.write("  height: 100%;\r\n");
      out.write("  min-width: 100%;\r\n");
      out.write("  font-size: 13px;\r\n");
      out.write("  color: #404040;\r\n");
      out.write("  direction: ltr;\r\n");
      out.write("  -webkit-text-size-adjust: none;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("#content {\r\n");
      out.write("\r\n");
      out.write("\ttop:  50px;\r\n");
      out.write("\tleft: 20%;\r\n");
      out.write("\twidth: 60%;\r\n");
      out.write("\theight: 500px;\r\n");
      out.write("\tbackground-color: gray;\r\n");
      out.write("\tdisplay: inline-block;\r\n");
      out.write("\tposition: fixed;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form {\r\n");
      out.write("\ttop: 60px;\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function chk_blank() {\r\n");
      out.write("\t\r\n");
      out.write("\t   if(document.purchase_confirm_form.card_company.value==\"\") {\r\n");
      out.write("\t\t\talert(\"카드사를 입력하세요\");\t\r\n");
      out.write("\t\t\treturn false;\t\t\r\n");
      out.write("\t\t} \r\n");
      out.write("\t   \r\n");
      out.write("\t   if(document.purchase_confirm_form.card_number.value==\"\") {\r\n");
      out.write("\t\t\talert(\"카드번호를 입력하세요\");\t\r\n");
      out.write("\t\t\treturn false;\t\t\r\n");
      out.write("\t\t} \r\n");
      out.write("\t   if(document.purchase_confirm_form.nfc_id.value==\"\") {\r\n");
      out.write("\t\t\talert(\"nfc를 테그하세요\");\t\r\n");
      out.write("\t\t\treturn false;\t\t\r\n");
      out.write("\t\t} \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"wrapper\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"content\" align=\"center\">\r\n");
      out.write("<h2>전자영수증 관리체계</h2>\r\n");
      out.write("\r\n");
      out.write("<form name=\"purchase_confirm_form\" method=\"post\" action=\"product_purchase_do.jsp\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t\t\t");

							SimpleDateFormat formatter = new SimpleDateFormat ( "yyyy-MM-dd" );
							Date currentTime = new Date();
							String purchase_date = formatter.format(currentTime);
							
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<tr><td colspan=\"5\">거래일시: ");
      out.print(purchase_date );
      out.write("</td></tr>\r\n");
      out.write("\t\t\t\t\t\t\t");

							int total = 0;
   							for(int i=0;i<amount.length;i++) {
   								while(rs[i].next()) {
   								if(!amount[i].equals("")&&Integer.parseInt(amount[i])!=0) {
							
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td>상품번호 :");
      out.print(product_id[i] );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td>상품명 :");
      out.print(rs[i].getString("product_name") );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td>단가 :");
      out.print(rs[i].getInt("product_price") );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td>수량 :");
      out.print(amount[i] );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td>금액:");
      out.print(Integer.parseInt(amount[i])*rs[i].getInt("product_price") );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td><input type=\"text\" name=\"product_id\" value=\"");
      out.print(product_id[i] );
      out.write("\" style=\"display: none; \"></td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td><input type=\"number\" name=\"amount\" value=\"");
      out.print(amount[i] );
      out.write("\" style=\"display: none; \"></td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td><input type=\"text\" name=\"purchase_date\" value=\"");
      out.print(purchase_date );
      out.write("\" style=\"display: none; \"></td>\r\n");
      out.write("\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t");

								total += Integer.parseInt(amount[i])*rs[i].getInt("product_price");
   									}
   								}
   							}
							
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<tr><td>합 계:");
      out.print(total );
      out.write("</td></tr>\r\n");
      out.write("\t\t\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t\t\t\t<br><br>\r\n");
      out.write("\t\t\t\t\t\t\t");

							if(total == 0) {
							
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<script>\r\n");
      out.write("\t\t\t\t\t\t\talert(\"계산할 상품이 없습니다.\");\r\n");
      out.write("\t\t\t\t\t\t\topener.location.reload(true);\r\n");
      out.write("\t\t\t\t\t\t\twindow.close();\r\n");
      out.write("\t\t\t\t\t\t\t</script>\r\n");
      out.write("\t\t\t\t\t\t\t");

							}
							
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr><td>카드사명:<input type=\"text\" name=\"card_company\"></td></tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr><td>카드번호:<input type=\"text\" name=\"card_number\"></td></tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr><td>NFC_id :<input type=\"text\" name=\"nfc_id\"></td></tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr><td><input type=\"submit\" value=\"계산완료\" onClick=\"return chk_blank()\"></td></tr>\r\n");
      out.write("\t\t\t\t\t\t\t</table>\r\n");
      out.write("\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");


	for(int i=0;i<product_id.length;i++) {
		rs[i].close();
	}

pstmt.close();
con.close();

}catch(SQLException e) {
out.print(e);
return;
}


      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
